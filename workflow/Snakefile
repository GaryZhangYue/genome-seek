# Python standard library
from os.path import join
from os import listdir
import datetime, json
import os, re

# 3rd party imports from pypi
from snakemake.workflow import workflow as wf_api
from snakemake.utils import R

# Local imports
from scripts.common import (
    ignore,
    provided, 
    references,
    str_bool
)

# Timestamp in YYYYMMDD format
today = str(datetime.datetime.today()).split()[0].replace('-', '')

# Global workflow variables
configfile: 'config.json'                      # Generated from user input and config/*.json
samples  = config['samples']                   # Base name of input samples
workpath = config['project']['workpath']       # Pipeline's output directory
filetype = config['project']['filetype']       # 'paired-end' or 'single-end' (not supported)
tmpdir   = config['options']['tmp_dir']        # Temporary directory
batch_id = config['options']['batch_id']       # Batch Identifer
chunks   = config['references']['CHR_CHUNKS']  # Scatter on chromosomes, chr1, ...
regions  = config['references']['CHR_REGIONS'] # Scatter on regions: chr1:1-30000001, ...
recals   = list(config['references']['NRECALS'].keys()) # Scatter recal on chromosome sets
tumors   = list(config['pairs'].keys())        # List of tumor samples
normals  = list(config['pairs'].items())       # List of normal samples
tumor2normal =  config['pairs']                # Dict to map a tumor to its normal

# Analysis Options 
call_cnv = str_bool(                      # Call copy number variation (CNVs),
    config['options']['call_cnv']         # default: False
)
call_sv = str_bool(                       # Call structural variation (SV),
    config['options']['call_sv']          # default: False
)
call_hla = str_bool(                      # Call HLA types,
    config['options']['call_hla']         # default: False
)
call_somatic = str_bool(                  # Call somatic variants,
    config['options']['call_somatic']     # default: False
)
skip_qc  = str_bool(                      # Skip over QC steps,
    config['options']['skip_qc']          # default: False
)
run_oc  = str_bool(                      # Run OpenCRAVAT rules,
    config['options']['open_cravat']     # default: False
)

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
# TODO: Add handler for when the
# mode is set to local.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

# Final ouput files of the pipeline
rule all:
    input:
        # FastQ Information, flowcell and lanes
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"rawQC","{name}.fastq.info.txt"),
            name=ignore(samples, skip_qc)
        ),
        # FastQC (before and after trimming)
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"rawQC","{name}.R1_fastqc.zip"), 
            name=ignore(samples, skip_qc)
        ),
        expand(
            join(workpath,"rawQC","{name}.R2_fastqc.zip"), 
            name=ignore(samples, skip_qc)
        ),
        expand(
             join(workpath,"QC","{name}.sorted_fastqc.html"),
            name=ignore(samples, skip_qc)
        ),
        # fastp, remove adapter sequences
        # @imported from rules/trim_map_preprocess.smk
        expand(
            join(workpath,"fastqs","{name}.R1.trimmed.fastq.gz"), 
            name=samples
        ),
        expand(
            join(workpath,"fastqs","{name}.R2.trimmed.fastq.gz"), 
            name=samples
        ),
        # FastQ Screen, contamination screening
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"FQscreen","{name}.R1.trimmed_screen.txt"),
            name=ignore(samples, skip_qc)
        ),
        expand(
            join(workpath,"FQscreen","{name}.R2.trimmed_screen.txt"),
            name=ignore(samples, skip_qc)
        ),
        # bwa-mem2, align to reference genome
        # @imported from rules/trim_map_preprocess.smk
        expand(
            join(workpath, "BAM", "{name}.sorted.bam.bai"), 
            name=samples
        ),
        # QualiMap2, bam quality control
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"QC","{name}","qualimapReport.html"),
            name=ignore(samples, skip_qc)
        ),
        # Samtools Flagstat, bam quality control
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"QC","{name}.samtools_flagstat.txt"),
            name=ignore(samples, skip_qc)
        ),
        # HLA*LA, infers hla type
        # Optional step, run if --call-hla
        # @imported from rules/hla.smk
        expand(
            join(workpath,"HLA", "{name}", "sample", "hla", "R1_bestguess_G.txt"),
            name=provided(samples, call_hla)
        ),
        # Deepvariant, call germline variants
        # @imported from rules/germline.smk
        expand(
            join(workpath, "deepvariant", "gVCFs", "{name}.g.vcf.gz"),
            name=samples
        ),
        expand(
            join(workpath, "deepvariant", "VCFs", "{name}.vcf.gz"),
            name=samples
        ),
        # GLnexus, jointly-called norm multi-sample VCF file
        # @imported from rules/germline.smk
        join(workpath, "deepvariant", "VCFs", "joint.glnexus.norm.vcf.gz"),
        # GATK4 SelectVariants, jointly-called norm per-sample VCF file
        # @imported from rules/germline.smk
        expand(
            join(workpath, "deepvariant", "VCFs", "{name}.germline.vcf.gz"),
            name=samples
        ),
        # BCFtools Stats, variant quality control
        # @imported from rules/qc.smk
        expand(
            join(workpath, "QC", "BCFStats", "{name}.germline.bcftools_stats.txt"),
            name=ignore(samples, skip_qc)
        ),
        # GATK4 VariantEval, variant quality control
        # @imported from rules/qc.smk
        expand(
            join(workpath, "QC", "VariantEval", "{name}.germline.eval.grp"),
            name=ignore(samples, skip_qc)
        ),
        # SNPeff, variant quality control and annotation
        # @imported from rules/qc.smk
        expand(
            join(workpath, "QC", "SNPeff", "{name}.germline.snpeff.ann.vcf"),
            name=samples
        ),
        # VCFtools, variant quality control 
        # @imported from rules/qc.smk
        expand(
            join(workpath, "QC", "{batch}_variants.het"),
            batch=ignore([batch_id], skip_qc)
        ),
        # Picards CollectVariantCallingMetrics, variant quality control
        # @imported from rules/qc.smk
        expand(
            join(workpath, "QC", "{batch}_variants.variant_calling_detail_metrics"),
            batch=ignore([batch_id], skip_qc)
        ),
        # Somalier, relatedness and ancestry 
        # @imported from rules/qc.smk
        expand(
            join(workpath, "somalier", "{name}.somalier"),
            name=samples
        ),
        join(workpath, "somalier", "relatedness.samples.tsv"),
        join(workpath, "somalier", "ancestry.somalier-ancestry.tsv"),
        # Peddy, infer biological sex
        # @imported from rules/cnv.smk
        expand( 
            join(workpath, "deepvariant", "VCFs", "{batch}_peddy.sex_check.csv"),        
            batch=provided([batch_id], call_cnv)
        ),
        # CANVAS, predicted germline CNVs
        # @imported from rules/cnv.smk
        expand( 
            join(workpath, "CANVAS", "{name}", "CNV.vcf.gz"),        
            name=provided(samples, call_cnv)
        ),
        # AnnotSV, annotated germline CNVs
        # @imported from rules/cnv.smk
        expand( 
            join(workpath, "CANVAS", "{name}", "{name}.segments.annotations.tsv"),       
            name=provided(samples, call_cnv)
        ),
        # Manta, call germline structural variation (SV),
        # only runs when provided --call-sv
        # @imported from rules/sv.smk
        expand( 
            join(workpath, "MANTA", "germline", "{name}", "results", "variants", "diploidSV.vcf.gz"),       
            name=provided(samples, call_sv)
        ),
        # GATK4 SelectVariants, jointly-called norm per-chrom VCF file
        # @imported from rules/open_cravat.smk
        expand( 
            join(workpath, "OpenCRAVAT", "VCFs", "{chunk}.germline.vcf.gz"),
            chunk=provided(chunks, run_oc)
        ),
        # OpenCRAVAT, annotation, rank and score variants
        # @imported from rules/open_cravat.smk
        expand( 
            join(workpath, "OpenCRAVAT", "cravat_{chunk}.sqlite"),
            chunk=provided(chunks, run_oc)
        ),
        # Filter OpenCRAVAT, filters SQL-lite file
        # @imported from rules/open_cravat.smk
        expand( 
            join(workpath, "OpenCRAVAT", "filter", "cravat_{chunk}.fixed.sqlite"),
            chunk=provided(chunks, run_oc)
        ),
        # Merge OpenCRAVAT, merges fitlered SQL-lite files
        # @imported from rules/open_cravat.smk
        provided([join(workpath, "OpenCRAVAT", "cravat.merged.sqlite")], run_oc),
        # GATK3 Indel Realignment
        # @imported from rules/gatk_recal.smk
        expand( 
            join(workpath, "BAM", "{name}.intervals"),
            name=provided(samples, call_somatic)
        ),
        # Scatterd GATK4 recalibration tables for ApplyBQSR
        # @imported from rules/gatk_recal.smk
        expand( 
            join(workpath, "BAM", "{name}_{recal}_data.grp"),
            name=provided(samples, call_somatic),
            recal=provided(recals, call_somatic)
        ),
        # Gathered GATK4 recalibration table for ApplyBQSR
        # @imported from rules/gatk_recal.smk
        expand( 
            join(workpath, "BAM", "{name}_gathered_recal_data.grp"),
            name=provided(samples, call_somatic),
        ),
        # Apply GATK4 recalibration to BAM file
        # @imported from rules/gatk_recal.smk
        expand( 
            join(workpath, "BAM", "{name}.recal.bam"),
            name=provided(samples, call_somatic),
        ),

        # Call somatic variants with Octopus,
        # scattered and merged on regions
        # to speed up overall run time
        # @imported from rules/somatic.smk
        expand( 
            join(workpath, "octopus", "somatic", "chunks", "{region}", "{name}.vcf.gz"),
            region=provided(regions, call_somatic),
            name=provided(tumors, call_somatic),
        ),
        expand( 
            join(workpath, "octopus", "somatic", "{name}.vcf"),
            name=provided(tumors, call_somatic),
        ),
        # Manta, call somatic structural variation (SV),
        # only runs if provided --call-somatic AND --call-sv
        # @imported from rules/sv.smk
        expand( 
            join(workpath, "MANTA", "somatic", "{name}", "results", "variants", "somaticSV.vcf.gz"),
            name=provided(provided(tumors, call_somatic), call_sv),
        ),
        # Mutect2, call somatic variants,
        # scattered and merged on chroms
        # to speed up overall run time,
        # only runs if provided --call-somatic 
        # @imported from rules/somatic.smk
        expand( 
            join(workpath, "mutect2", "chrom_split", "{name}.{chrom}.vcf"),
            name=provided(tumors, call_somatic),
            chrom=provided(chunks, call_somatic),
        ),
        expand( 
            join(workpath, "mutect2", "{name}_mutect2.vcf"),
            name=provided(tumors, call_somatic),
        ),
        expand( 
            join(workpath, "mutect2", "{name}.read-orientation-model.tar.gz"),
            name=provided(tumors, call_somatic),
        ),
        # MultiQC, QC report and sample statistics
        # @imported from rules/qc.smk 
        join(workpath, "QC", "MultiQC_Report.html"),


# Import rules
include: join("rules", "trim_map.smk")
include: join("rules", "germline.smk")
include: join("rules", "qc.smk")
include: join("rules", "hla.smk")
include: join("rules", "cnv.smk")
include: join("rules", "sv.smk")
include: join("rules", "open_cravat.smk")
include: join("rules", "gatk_recal.smk")
include: join("rules", "somatic.smk")