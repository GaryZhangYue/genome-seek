# Python standard library
from os.path import join
from os import listdir
import datetime, json
import os, re

# 3rd party imports from pypi
from snakemake.workflow import workflow as wf_api
from snakemake.utils import R

# Local imports
from scripts.common import (
    ignore,
    provided, 
    references,
    str_bool
)

# Global workflow variables
configfile: 'config.json'                 # CSI_wes_pipeline/resources/processing_references_biowulf_hg38.json
samples  = config['samples']              # Base name of input samples
workpath = config['project']['workpath']  # Pipeline's output directory
filetype = config['project']['filetype']  # 'paired-end' or 'single-end' (not supported)
tmpdir = config['options']['tmp_dir']     # Temporary directory

# Analysis Options 
call_cnv = str_bool(                      # Call copy number variation (CNVs),
    config['options']['call_cnv']         # default: False
)
call_sv = str_bool(                       # Call structural variation (SV),
    config['options']['call_sv']          # default: False
)
call_hla = str_bool(                      # Call HLA types,
    config['options']['call_hla']         # default: False
)
skip_qc  = str_bool(                      # Skip over QC steps,
    config['options']['skip_qc']          # default: False
)


# TODO: Clean up this section of legacy variables
# dir_renamed = os.getcwd()                            # output directory name 
# batch_number = re.sub("^.*WGS","",dir_renamed)       # leave, determine from outdir name
# batch_name = "nhlbi7"                                # Talk to Justin about how this should be set, maybe via cli
# todays_date = re.sub('-','',str(datetime.datetime.today()).split()[0]) 
# Read in the masterkey file 
# df = pd.read_csv("keyfile", header=0, sep='\t')     # Talk to Justin about this file, get example
# dict_CIDR = dict(zip(df['ID'].tolist(), df['File_Prefix'].tolist()))
# keyfile = "keyfile"
# chunks = ['chr1:1-30000001','chr1:30000001-60000001','chr1:60000001-90000001','chr1:90000001-120000001','chr1:120000001-150000001','chr1:150000001-180000001','chr1:180000001-210000001','chr1:210000001-240000001','chr1:240000001-248956422','chr2:1-30000001','chr2:30000001-60000001','chr2:60000001-90000001','chr2:90000001-120000001','chr2:120000001-150000001','chr2:150000001-180000001','chr2:180000001-210000001','chr2:210000001-240000001','chr2:240000001-242193529','chr3:1-30000001','chr3:30000001-60000001','chr3:60000001-90000001','chr3:90000001-120000001','chr3:120000001-150000001','chr3:150000001-180000001','chr3:180000001-198295559','chr4:1-30000001','chr4:30000001-60000001','chr4:60000001-90000001','chr4:90000001-120000001','chr4:120000001-150000001','chr4:150000001-180000001','chr4:180000001-190214555','chr5:1-30000001','chr5:30000001-60000001','chr5:60000001-90000001','chr5:90000001-120000001','chr5:120000001-150000001','chr5:150000001-180000001','chr5:180000001-181538259','chr6:1-30000001','chr6:30000001-60000001','chr6:60000001-90000001','chr6:90000001-120000001','chr6:120000001-150000001','chr6:150000001-170805979','chr7:1-30000001','chr7:30000001-60000001','chr7:60000001-90000001','chr7:90000001-120000001','chr7:120000001-150000001','chr7:150000001-159345973','chr8:1-30000001','chr8:30000001-60000001','chr8:60000001-90000001','chr8:90000001-120000001','chr8:120000001-145138636','chr9:1-30000001','chr9:30000001-60000001','chr9:60000001-90000001','chr9:90000001-120000001','chr9:120000001-138394717','chr10:1-30000001','chr10:30000001-60000001','chr10:60000001-90000001','chr10:90000001-120000001','chr10:120000001-133797422','chr11:1-30000001','chr11:30000001-60000001','chr11:60000001-90000001','chr11:90000001-120000001','chr11:120000001-135086622','chr12:1-30000001','chr12:30000001-60000001','chr12:60000001-90000001','chr12:90000001-120000001','chr12:120000001-133275309','chr13:1-30000001','chr13:30000001-60000001','chr13:60000001-90000001','chr13:90000001-114364328','chr14:1-30000001','chr14:30000001-60000001','chr14:60000001-90000001','chr14:90000001-107043718','chr15:1-30000001','chr15:30000001-60000001','chr15:60000001-90000001','chr15:90000001-101991189','chr16:1-30000001','chr16:30000001-60000001','chr16:60000001-90000001','chr16:90000001-90338345','chr17:1-30000001','chr17:30000001-60000001','chr17:60000001-83257441','chr18:1-30000001','chr18:30000001-60000001','chr18:60000001-80373285','chr19:1-30000001','chr19:30000001-58617616','chr20:1-30000001','chr20:30000001-60000001','chr20:60000001-64444167','chr21:1-30000001','chr21:30000001-46709983','chr22:1-30000001','chr22:30000001-50818468','chrX:1-30000001','chrX:30000001-60000001','chrX:60000001-90000001','chrX:90000001-120000001','chrX:120000001-150000001','chrX:150000001-156040895','chrY:1-30000001','chrY:30000001-57227415','chrM:1-16569']

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
# TODO: Add handler for when the
# mode is set to local.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)

# Final ouput files of the pipeline
rule all:
    input:
        # FastQ Information, flowcell and lanes
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"rawQC","{name}.fastq.info.txt"),
            name=ignore(samples, skip_qc)
        ),
        # FastQC (before and after trimming)
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"rawQC","{name}.R1_fastqc.zip"), 
            name=ignore(samples, skip_qc)
        ),
        expand(
            join(workpath,"rawQC","{name}.R2_fastqc.zip"), 
            name=ignore(samples, skip_qc)
        ),
        expand(
             join(workpath,"QC","{name}.sorted_fastqc.html"),
            name=ignore(samples, skip_qc)
        ),
        # fastp, remove adapter sequences
        # @imported from rules/trim_map_preprocess.smk
        expand(
            join(workpath,"fastqs","{name}.R1.trimmed.fastq.gz"), 
            name=samples
        ),
        expand(
            join(workpath,"fastqs","{name}.R2.trimmed.fastq.gz"), 
            name=samples
        ),
        # FastQ Screen, contamination screening
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"FQscreen","{name}.R1.trimmed_screen.txt"),
            name=ignore(samples, skip_qc)
        ),
        expand(
            join(workpath,"FQscreen","{name}.R2.trimmed_screen.txt"),
            name=ignore(samples, skip_qc)
        ),
        # bwa-mem2, align to reference genome
        # @imported from rules/trim_map_preprocess.smk
        expand(
            join(workpath, "BAM", "{name}.sorted.bam.bai"), 
            name=samples
        ),
        # QualiMap2, bam quality control
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"QC","{name}","qualimapReport.html"),
            name=ignore(samples, skip_qc)
        ),
        # Samtools Flagstat, bam quality control
        # Optional step, not run if --skip-qc 
        # @imported from rules/qc.smk
        expand(
            join(workpath,"QC","{name}.samtools_flagstat.txt"),
            name=ignore(samples, skip_qc)
        ),
        # HLA*LA, infers hla type
        # Optional step, run if --call-hla
        # @imported from rules/hla.smk
        expand(
            join(workpath,"HLA", "{name}", "sample", "hla", "R1_bestguess_G.txt"),
            name=provided(samples, call_hla)
        ),
        # Deepvariant, call germline variants
        # @imported from rules/germline.smk
        expand(
            join(workpath, "deepvariant", "gVCFs", "{name}.g.vcf.gz"),
            name=samples
        ),
        expand(
            join(workpath, "deepvariant", "VCFs", "{name}.vcf.gz"),
            name=samples
        ),
        # GLnexus, joint called multi-sample BCF file
        # @imported from rules/germline.smk
        expand(
            join(workpath, "deepvariant", "VCFs", "joint.bcf"),
            name=samples
        ),


# Import rules
include: join("rules", "trim_map.smk")
include: join("rules", "germline.smk")
include: join("rules", "qc.smk")
include: join("rules", "hla.smk")
